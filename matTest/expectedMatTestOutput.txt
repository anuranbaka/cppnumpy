matrix m
[[1 2 3 4]
 [5 6 7 8]]
matrix n
[[1 2 3]]
matrix o
[[[1 2 3 4]
  [5 6 7 8]]

 [[9 10 11 12]
  [13 14 15 16]]]
matrix x
[[1 2 3]
 [4 5 6]
 [7 8 9]]
matrix y
[[1 2 3 4 5 6]
 [7 8 9 10 11 12]
 [13 14 15 16 17 18]
 [19 20 21 22 23 24]]
matrix z
[[[[1 2 3 4 5 6]
   [7 8 9 10 11 12]
   [13 14 15 16 17 18]
   [19 20 21 22 23 24]]]


 [[[25 26 27 28 29 30]
   [31 32 33 34 35 36]
   [37 38 39 40 41 42]
   [43 44 45 46 47 48]]]


 [[[49 50 51 52 53 54]
   [55 56 57 58 59 60]
   [61 62 63 64 65 66]
   [67 68 69 70 71 72]]]


 [[[73 74 75 76 77 78]
   [79 80 81 82 83 84]
   [85 86 87 88 89 90]
   [91 92 93 94 95 96]]]]
transpose of x
[[1 4 7]
 [2 5 8]
 [3 6 9]]
transpose of m
[[1 5]
 [2 6]
 [3 7]
 [4 8]]
transpose of o
[[[1 9]
  [5 13]]

 [[2 10]
  [6 14]]

 [[3 11]
  [7 15]]

 [[4 12]
  [8 16]]]
n + x
[[2 4 6]
 [5 7 9]
 [8 10 12]]
m + o
[[[2 4 6 8]
  [10 12 14 16]]

 [[10 12 14 16]
  [18 20 22 24]]]
transpose of n + x
[[2 3 4]
 [6 7 8]
 [10 11 12]]
transpose of x - transpose of n
[[0 3 6]
 [0 3 6]
 [0 3 6]]
y * z
[[[[1 4 9 16 25 36]
   [49 64 81 100 121 144]
   [169 196 225 256 289 324]
   [361 400 441 484 529 576]]]


 [[[25 52 81 112 145 180]
   [217 256 297 340 385 432]
   [481 532 585 640 697 756]
   [817 880 945 1012 1081 1152]]]


 [[[49 100 153 208 265 324]
   [385 448 513 580 649 720]
   [793 868 945 1024 1105 1188]
   [1273 1360 1449 1540 1633 1728]]]


 [[[73 148 225 304 385 468]
   [553 640 729 820 913 1008]
   [1105 1204 1305 1408 1513 1620]
   [1729 1840 1953 2068 2185 2304]]]]
matrix multiplication n ^ x
[[30 36 42]]
m.copy(newMat)
[[1 2 3 4]
 [5 6 7 8]]
y.copy()
[[1 2 3 4 5 6]
 [7 8 9 10 11 12]
 [13 14 15 16 17 18]
 [19 20 21 22 23 24]]
casting matrix x to float using copy<float>()
[[1 2 3]
 [4 5 6]
 [7 8 9]]
casting matrix x to float using copy(dest)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
using bitwise and: x & 1
[[1 0 1]
 [0 1 0]
 [1 0 1]]
using bitwise or: x | 7
[[7 7 7]
 [7 7 7]
 [7 15 15]]
m.roi(0,1,1,3)
[[2 3]
 [6 7]]
-x.roi(1,-1,1)
[[-5 -6]
 [-8 -9]]
y.roi(1,3)
[[7 8 9 10 11 12]
 [13 14 15 16 17 18]]
y.roi(1)
[[7 8 9 10 11 12]
 [13 14 15 16 17 18]
 [19 20 21 22 23 24]]
z.roi(1,3,0,1,2,4,2,5)
[[[[39 40 41]
   [45 46 47]]]


 [[[63 64 65]
   [69 70 71]]]]
x.roi(-1)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
fancy indexing to mask just elements 0,1,3,5 of matrix m
[1 2 4 6]
applying the mask using ito
[1 2 4 6]
fancy indexing to get just rows 1 and 3 of matrix y
[[7 8 9 10 11 12]
 [19 20 21 22 23 24]]
using the same index to get layers 1 and 3 of matrix z
[[[[25 26 27 28 29 30]
   [31 32 33 34 35 36]
   [37 38 39 40 41 42]
   [43 44 45 46 47 48]]]


 [[[73 74 75 76 77 78]
   [79 80 81 82 83 84]
   [85 86 87 88 89 90]
   [91 92 93 94 95 96]]]]
applying the indexing using ito
[[[[25 26 27 28 29 30]
   [31 32 33 34 35 36]
   [37 38 39 40 41 42]
   [43 44 45 46 47 48]]]


 [[[73 74 75 76 77 78]
   [79 80 81 82 83 84]
   [85 86 87 88 89 90]
   [91 92 93 94 95 96]]]]
m.T()
[[1 5]
 [2 6]
 [3 7]
 [4 8]]
m.T(output)
[[1 2 3 4]
 [5 6 7 8]]
x.T()
[[1 4 7]
 [2 5 8]
 [3 6 9]]
y.roi(1,3,2,5).scalarFill(0)
[[1 2 3 4 5 6]
 [7 8 0 0 0 12]
 [13 14 0 0 0 18]
 [19 20 21 22 23 24]]
Printing a 1x1 matrix
[[5]]
Printing a 0x0 matrix

(should be nothing above this line)
Set each element of x to a minimum of 4 with broadcast()
[[4 4 4]
 [4 5 6]
 [7 8 9]]
broadcast scalar: z + 5
[[[[6 7 8 9 10 11]
   [12 13 14 15 16 17]
   [18 19 20 21 22 23]
   [24 25 26 27 28 29]]]


 [[[30 31 32 33 34 35]
   [36 37 38 39 40 41]
   [42 43 44 45 46 47]
   [48 49 50 51 52 53]]]


 [[[54 55 56 57 58 59]
   [60 61 62 63 64 65]
   [66 67 68 69 70 71]
   [72 73 74 75 76 77]]]


 [[[78 79 80 81 82 83]
   [84 85 86 87 88 89]
   [90 91 92 93 94 95]
   [96 97 98 99 100 101]]]]
broadcast scalar: 10 - x
[[9 8 7]
 [6 5 4]
 [3 2 1]]
broadcast scalar: 2520 / x
[[2520 1260 840]
 [630 504 420]
 [360 315 280]]
1d matrix a
[1 2 3 4 5 6]
1d matrix b
[3 3 3 3 3 3]
1d matrix c
[5]
empty 1d matrix d
(should be nothing above this line)

a + b (assignment to previously 2d matrix)
[4 5 6 7 8 9]
c - a
[4 3 2 1 0 -1]
-a
[-1 -2 -3 -4 -5 -6]
matrix a, elements 2 to 4
[3 4 5]
assignment of those elements to 7s
[1 2 7 7 7 6]
a += b
[4 5 10 10 10 9]
a -= b
[1 2 7 7 7 6]
a *= 2
[2 4 14 14 14 12]
a /= 2
[1 2 7 7 7 6]
fancy indexing to get just elements 1 and 3 of matrix a
[2 7]
and again using ito
[2 7]
broadcast(a,b,Max);
[3 3 7 7 7 6]
broadcast(a,3,Max);
[3 3 7 7 7 6]
broadcast(5,b,Max);
[5 5 5 5 5 5]
8x8 matrix of zeros
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
3x3x2x2x2 matrix of ones
[[[[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]


  [[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]]



 [[[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]


  [[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]]



 [[[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]


  [[[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]

   [[1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]
    [1 1 1 1 1 1]]]]]
6x6 identity matrix
[[1 0 0 0 0 0]
 [0 1 0 0 0 0]
 [0 0 1 0 0 0]
 [0 0 0 1 0 0]
 [0 0 0 0 1 0]
 [0 0 0 0 0 1]]
4x7 identity matrix with diagonal at 1
[[0 1 0 0 0 0 0]
 [0 0 1 0 0 0 0]
 [0 0 0 1 0 0 0]
 [0 0 0 0 1 0 0]]
4x7 identity matrix with diagonal at -2
[[0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0]
 [1 0 0 0 0 0 0]
 [0 1 0 0 0 0 0]]
reshape the previous matrix into a 14x2 matrix
[[0 0]
 [0 0]
 [0 0]
 [0 0]
 [0 0]
 [0 0]
 [0 0]
 [1 0]
 [0 0]
 [0 0]
 [0 0]
 [1 0]
 [0 0]
 [0 0]]
reshape again into a 2x2x7 matrix
[[[0 0 0 0 0 0 0]
  [0 0 0 0 0 0 0]]

 [[1 0 0 0 0 0 0]
  [0 1 0 0 0 0 0]]]
matrix x as a 1d, 9 element matrix
[1 2 3 4 5 6 7 8 9]
printing matrix y again as a reminder of its current state
[[1 2 3 4 5 6]
 [7 8 0 0 0 12]
 [13 14 0 0 0 18]
 [19 20 21 22 23 24]]
y.roi(1,3).reshape(6,2)
points to the same data because it is contiguous
[[7 8]
 [0 0]
 [0 12]
 [13 14]
 [0 0]
 [0 18]]
reshaping the transpose of y to a 2,12 matrix
points to a copy because it is not contiguous
[[1 7 13 19 2 8 14 20 3 0 0 21]
 [4 0 0 22 5 0 0 23 6 12 18 24]]
reshaping y to a 2,2,3,2 matrix
[[[[1 2]
   [3 4]
   [5 6]]

  [[7 8]
   [0 0]
   [0 12]]]


 [[[13 14]
   [0 0]
   [0 18]]

  [[19 20]
   [21 22]
   [23 24]]]]
arange(3)
[0 1 2]
arange(3,7)
[3 4 5 6]
arange(3,7,2)
[3 5]
y.i(Mat<size_t>::arange(1,5,2))
[[7 8 0 0 0 12]
 [19 20 21 22 23 24]]
printing arange(1,5,-2), which should just be size 0

15 element c-style array wrapped into a 3x5 matrix
[[1 2 3 4 5]
 [6 7 8 9 10]
 [11 12 13 14 15]]
doubling the center 3 columns
[[1 4 6 8 5]
 [6 14 16 18 10]
 [11 24 26 28 15]]
boolMat:
[[1 1 0]]
boolMat && matrix x
[[1 1 0]
 [1 1 0]
 [1 1 0]]
matrix x && !boolMat
[[0 0 1]
 [0 0 1]
 [0 0 1]]
boolMat || !x
[[1 1 0]
 [1 1 0]
 [1 1 0]]
x || boolMat
[[1 1 1]
 [1 1 1]
 [1 1 1]]
true && y
[[1 1 1 1 1 1]
 [1 1 0 0 0 1]
 [1 1 0 0 0 1]
 [1 1 1 1 1 1]]
!y || false
[[0 0 0 0 0 0]
 [0 0 1 1 1 0]
 [0 0 1 1 1 0]
 [0 0 0 0 0 0]]
!boolMat && true
[[0 0 1]]
Checking if any elements of !boolMat are true:
At least one is true!
Checking if all elements of y are true:
Nope, at least one is false
Checking if any elements of x are greater than 4:
Some are greater!
Checking if all elements of y are less than 20:
Nope, at least one is greater
Checking if any elements of y are equal to 3:
At least one is 3!
Checking if all elements in x are not equal to 8:
At least one element is an 8!
Matrix of bools representing all values in y < 5
[[1 1 1 1 0 0]
 [0 0 1 1 1 0]
 [0 0 1 1 1 0]
 [0 0 0 0 0 0]]
Checking if all elements in of an empty matrix are true:
Well, nothing is false, so we're good!
Checking if any elements in an empty matrix are true:
Nope, nothing true here.
Invertible Matrix:
[[3 0 2]
 [2 0 -2]
 [0 1 1]]
multiplied by its inverse
[[1 0 0]
 [0 1 0]
 [0 0 1]]
The dreaded Hilbert matrix:
[[1 0.5 0.333333 0.25 0.2]
 [0.5 0.333333 0.25 0.2 0.166667]
 [0.333333 0.25 0.2 0.166667 0.142857]
 [0.25 0.2 0.166667 0.142857 0.125]
 [0.2 0.166667 0.142857 0.125 0.111111]]
inverse of the Hilbert matrix
[[25 -300 1050 -1400 630]
 [-300 4800 -18900 26880 -12600]
 [1050 -18900 79380 -117600 56700]
 [-1400 26880 -117600 179200 -88200]
 [630 -12600 56700 -88200 44100]]
